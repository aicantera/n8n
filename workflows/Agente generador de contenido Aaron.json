{
  "createdAt": "2025-06-12T23:12:04.054Z",
  "updatedAt": "2025-06-13T00:05:47.000Z",
  "id": "fMWJs5KoHPsoLgpj",
  "name": "Agente generador de contenido Aaron",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        0,
        0
      ],
      "id": "d3431970-d633-40ff-b2e7-287d3b0572ca",
      "name": "Telegram Trigger",
      "webhookId": "a53e04e7-8dcf-4d2c-b9d3-5671e8b99c7a",
      "credentials": {
        "telegramApi": {
          "id": "IFiolr4CXfc0j6II",
          "name": "Telegram account Generador contenido Aaron"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message.text }}",
        "options": {
          "systemMessage": "=**Instructions for n8n Parent Agent: Social Media Post Creator**\n \n**Objective:** To orchestrate the workflow for creating social media posts by calling upon two child agents: \"agente_scrappyng\" for information retrieval and \"agente_copy\" for image generation. The parent agent will then combine the scraped information and the generated image to produce a complete social media post.\n \n**Workflow:**\n \n1.  **Receive User Request:** The parent agent will receive a user's request specifying the topic or keywords for the social media post.\n \n2.  **Call \"agente_scrappyng\":**\n    * The parent agent will invoke the \"agente_scrappyng\" agent.\n    * It will pass the user's input (topic/keywords) as the search query for \"agente_scrappyng\".\n    * It will instruct \"agente_scrappyng\" to perform web scraping to find relevant information based on the query.\n    * It will expect \"agente_scrappyng\" to return a summary of the findings in two short paragraphs (maximum 500 characters per paragraph), as previously defined.\n \n3.  **Receive Scraped Information:** The parent agent will receive the summarized information from \"agente_scrappyng\".\n \n4.  **Call \"agente_copy\" (Image Generation):**\n    * The parent agent will invoke the \"agente_copy\" agent (assuming this is the designated name for the image generation agent).\n    * It will pass the summarized information received from \"agente_scrappyng\" as context for the image generation.\n    * It will instruct \"agente_copy\" to generate a relevant and visually appealing image that complements the scraped information and is suitable for social media.\n    * It will expect \"agente_copy\" to return the generated image (e.g., as a file path or data URL).\n \n5.  **Receive Generated Image:** The parent agent will receive the image from \"agente_copy\".\n \n6.  **Construct Social Media Post:**\n    * The parent agent will combine the summarized information from \"agente_scrappyng\" and the generated image from \"agente_copy\".\n    * It will format this information into a complete social media post, considering best practices for engagement and readability on social media platforms.\n    * This may involve:\n        * Writing a compelling caption that incorporates key findings from the scraped information.\n        * Ensuring the caption is engaging, informative, and includes a call to action (if appropriate).\n        * Attaching the generated image to the post.\n        * Suggesting relevant hashtags.\n \n7.  **Output Social Media Post:** The parent agent will output the complete social media post (text and image).\n \n**Output Format (in Spanish):**\n \n```markdown\n**Post para Redes Sociales:**\n \n**Imagen:** [Aquí se adjuntaría la imagen generada por el agente_copy]\n \n**Texto:**\n \n[Párrafo 1 del resumen del agente_scrappyng]\n \n[Párrafo 2 del resumen del agente_scrappyng]\n \n[Texto adicional para redes sociales: titular llamativo, llamada a la acción, etc. - aplicando principios de copywriting]\n \n**Hashtags sugeridos:** #[Hashtag1] #[Hashtag2] #[HashtagRelacionado]\n \n{{ new Date().toISOString() }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        220,
        0
      ],
      "id": "9a73a005-30ea-4ee4-b8ec-326d3123109d",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        120,
        180
      ],
      "id": "9a9302fb-c83d-48d8-a99a-6ef3b78fde8c",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "Q8WQKibB08nTTio4",
          "name": "OpenAi account CanteraConnect"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.message.chat.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        300,
        180
      ],
      "id": "e3a2ad7a-a8ae-43a3-993f-aa887fba255e",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "description": "llamar a este agente cuando se tenga una petición de busqueda en internet",
        "workflowId": {
          "__rl": true,
          "value": "vvPYb2l9KXrTIDnf",
          "mode": "list",
          "cachedResultName": "Agente scraping Aaron"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        420,
        220
      ],
      "id": "970a9f60-b480-4948-a30f-b3c50b6d3d37",
      "name": "agente_scrappyng"
    },
    {
      "parameters": {
        "description": "se llama a este agente cuando se necesite generar intrucciones para un modelo de generacion de imagenes",
        "workflowId": {
          "__rl": true,
          "value": "zBAo2KFJdR9UbAbs",
          "mode": "list",
          "cachedResultName": "Agente copy writter Aaron"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        540,
        180
      ],
      "id": "e80845fa-cf39-4402-95d3-80b1630b095d",
      "name": "agente_copy"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.output }}",
        "messages": {
          "messageValues": [
            {
              "message": "=**Prompt Completo para la Cadena LLM de Formateo de Salida**\n \n**Idioma de Instrucciones:** Inglés\n \n**Idioma de Respuesta:** Español\n \n**Objetivo:** Formatear la respuesta de salida de un modelo de lenguaje grande (LLM) para eliminar símbolos extraños o estructuras de información que no sean palabras u oraciones estándar en español. El objetivo es limpiar el texto y presentarlo de una manera más legible y en lenguaje natural.\n \n**Instrucciones Detalladas para el Modelo LLM:**\n \n1.  **Input Analysis:** Recibe una cadena de texto como entrada. Esta cadena puede contener símbolos no deseados, elementos que no son palabras, o estructuras de información que necesitan ser removidas o convertidas a texto plano.\n \n2.  **Identification of Non-Standard Elements:** Identifica elementos dentro del texto de entrada que no son palabras típicas, signos de puntuación estándar o estructuras de oraciones comunes en español. Esto incluye, pero no se limita a:\n    * Símbolos especiales o caracteres inusuales (por ejemplo, `###`, `####`, `-----`, caracteres de control, etc.).\n    * Estructuras de formato como listas con viñetas (`-`), listas numeradas (`1.`, `2.`), si el objetivo es texto plano continuo.\n    * Enlaces URL o direcciones web, si no se consideran parte del contenido principal en lenguaje natural.\n    * Cualquier otro marcador no lingüístico o artefacto del formato original que dificulte la lectura como texto normal.\n \n3.  **Removal and Transformation:** Aplica las siguientes acciones a los elementos no estándar identificados:\n    * **Eliminación:** Remueve completamente los símbolos o estructuras que no contribuyen al significado del texto como lenguaje natural en español.\n    * **Transformación:** Convierte estructuras como listas en texto continuo, utilizando conectores lingüísticos apropiados (por ejemplo, \"Además,\", \"También,\", \"En cuanto a,\"). Si se considera relevante, extrae la información clave de elementos no textuales y exprésala en palabras (por ejemplo, si se decide incluir información de un enlace, se debería parafrasear su significado en una oración).\n \n4.  **Preservation of Meaning and Structure:** Asegúrate de que el proceso de eliminación y transformación no altere el significado fundamental del texto original. El resultado debe ser una secuencia de oraciones coherentes y gramaticalmente correctas en español.\n \n5.  **Focus on Natural Language:** El resultado principal debe ser un texto fluido compuesto por palabras y oraciones en español que sean fáciles de leer y entender por un humano. Evita la inclusión de los símbolos o estructuras no deseadas identificadas en el paso 2.\n "
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        660,
        -40
      ],
      "id": "e1ba11d5-d46d-47b2-8c3c-64a5d45ebd3c",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        700,
        140
      ],
      "id": "4e0c7922-cc2e-43f8-85c1-f76e2d762587",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "Q8WQKibB08nTTio4",
          "name": "OpenAi account CanteraConnect"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1020,
        -40
      ],
      "id": "bd6d1fcf-6323-4926-b70b-767ceb2c633e",
      "name": "Telegram",
      "webhookId": "b8f9f858-71b8-444a-8598-f6d20d30e0ae",
      "credentials": {
        "telegramApi": {
          "id": "IFiolr4CXfc0j6II",
          "name": "Telegram account Generador contenido Aaron"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.output }}",
        "messages": {
          "messageValues": [
            {
              "message": "**Instructions for the AI Model: DALL-E Prompt Generator**  **Objective:** To receive a user's request and generate detailed and effective prompts specifically designed for OpenAI's DALL-E image generation model. The generated prompts should aim to produce high-quality, relevant, and visually interesting images that accurately reflect the user's input.  **Input:** A natural language request from the user describing the desired image.  **Tasks:**  1.  **Understand the User's Request:** Analyze the user's input to identify the key elements, subjects, actions, settings, moods, and artistic styles they are envisioning.  2.  **Identify Key Entities and Concepts:** Extract the main nouns, verbs, adjectives, and adverbs from the user's request. These form the core of the image to be generated.  3.  **Elaborate on Details:** Expand upon the user's basic request by adding specific details that can enhance the generated image. Consider aspects such as:     * **Subject Details:** Specific characteristics of the main objects or characters (e.g., age, clothing, expression, posture).     * **Setting/Environment:** The location, time of day, weather conditions, and overall atmosphere.     * **Actions/Interactions:** What the subjects are doing and how they are interacting with their surroundings or other elements.     * **Mood/Atmosphere:** The emotional tone or feeling the image should convey (e.g., serene, mysterious, vibrant, dramatic).     * **Lighting:** The type and direction of light (e.g., soft sunlight, dramatic shadows, neon glow).     * **Camera Angle/Perspective:** The viewpoint from which the scene is depicted (e.g., close-up, wide shot, bird's-eye view).  4.  **Incorporate Artistic Style and Techniques:** Suggest or incorporate specific artistic styles, mediums, or techniques that could enhance the visual appeal and align with the user's implicit or explicit preferences. Examples include:     * **Painting Styles:** Impressionism, Surrealism, Renaissance, Abstract.     * **Photography Styles:** Macro, Landscape, Portrait, Documentary.     * **Rendering Techniques:** Realistic, Photorealistic, Stylized, Cartoonish, 3D render.     * **Artists:** Referencing the style of famous artists (e.g., \"in the style of Van Gogh\").  5.  **Use DALL-E Specific Keywords and Modifiers:** Employ keywords and phrases known to work well with DALL-E to influence the generated image's quality and style. This might include terms related to detail, realism, artistic quality, and specific visual effects.  6.  **Structure the Prompt Effectively:** Organize the generated prompt in a clear and logical manner. A common structure includes:     * Start with the main subject(s).     * Describe the setting and environment.     * Specify any actions or interactions.     * Detail the desired mood, lighting, and camera angle.     * Mention the artistic style or rendering technique.     * Include quality enhancers (e.g., \"highly detailed,\" \"realistic,\" \"cinematic lighting\").  7.  **Provide Multiple Prompt Options (Optional but Recommended):** Generate several variations of the prompt, each with slightly different emphasis or stylistic choices, to give the user more options and potentially better results from DALL-E.  **Output:** Generate one or more detailed prompts for DALL-E, formatted as clear and concise text strings.  **Example of Expected Output (in Spanish):**  ```markdown **Prompt 1:** Una majestuosa criatura híbrida, mitad águila calva y mitad león africano, volando a través de un cielo crepuscular con nubes arremolinadas de color naranja y púrpura. Plumaje dorado brillante y melena leonina ondeando al viento. Iluminación dramática, estilo de pintura de fantasía épica.  **Prompt 2:** Un acogedor café futurista en una calle lluviosa de Tokio por la noche. Luces de neón reflejándose en el pavimento mojado. Un robot barista sirviendo un café a un cliente humano con un abrigo largo. Ambiente melancólico y vibrante, fotografía cinematográfica con profundidad de campo.  **Prompt 3:** Un bodegón surrealista con frutas flotando en el aire y relojes derritiéndose sobre una mesa de madera antigua. Fondo abstracto con colores vibrantes y formas geométricas. Estilo de Salvador Dalí. Alta resolución, detalles intrincados."
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        780,
        340
      ],
      "id": "51e66d3d-2098-4d00-b3b8-1f457f80add9",
      "name": "Basic LLM Chain1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        880,
        560
      ],
      "id": "88942aeb-13a6-45b4-86d1-7a612885e1a4",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "Q8WQKibB08nTTio4",
          "name": "OpenAi account CanteraConnect"
        }
      }
    },
    {
      "parameters": {
        "resource": "image",
        "prompt": "={{ $json.text }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        1140,
        340
      ],
      "id": "92f863f9-c755-45f0-8d31-0c364fc22347",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "Q8WQKibB08nTTio4",
          "name": "OpenAi account CanteraConnect"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendPhoto",
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "binaryData": true,
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1360,
        340
      ],
      "id": "7e24442a-0799-46ef-871d-4cddf5b62fb3",
      "name": "Telegram1",
      "webhookId": "394af060-e4d2-4bb7-be15-6c49b7c7ab4e",
      "credentials": {
        "telegramApi": {
          "id": "IFiolr4CXfc0j6II",
          "name": "Telegram account Generador contenido Aaron"
        }
      }
    }
  ],
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "agente_scrappyng": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "agente_copy": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          },
          {
            "node": "Basic LLM Chain1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram": {
      "main": [
        []
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain1": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Telegram1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "15ee2056-9556-4698-bd61-9ffe8fd3fb03",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-06-12T23:12:04.058Z",
      "updatedAt": "2025-06-12T23:12:04.058Z",
      "role": "workflow:owner",
      "workflowId": "fMWJs5KoHPsoLgpj",
      "projectId": "CT8jqMv2UjSvaT1W",
      "project": {
        "createdAt": "2025-05-30T21:50:01.643Z",
        "updatedAt": "2025-05-30T21:51:05.081Z",
        "id": "CT8jqMv2UjSvaT1W",
        "name": "Aaron Avila <ravila@canteradigital.mx>",
        "type": "personal",
        "icon": null,
        "description": null,
        "projectRelations": [
          {
            "createdAt": "2025-05-30T21:50:01.650Z",
            "updatedAt": "2025-05-30T21:50:01.650Z",
            "role": "project:personalOwner",
            "userId": "66393108-3fbc-4a7f-81fe-752936ae60ef",
            "projectId": "CT8jqMv2UjSvaT1W",
            "user": {
              "createdAt": "2025-05-30T21:50:01.641Z",
              "updatedAt": "2025-07-01T00:46:17.622Z",
              "id": "66393108-3fbc-4a7f-81fe-752936ae60ef",
              "email": "ravila@canteradigital.mx",
              "firstName": "Aaron",
              "lastName": "Avila",
              "personalizationAnswers": {
                "version": "v4",
                "personalization_survey_submitted_at": "2025-05-30T21:53:17.529Z",
                "personalization_survey_n8n_version": "1.92.2",
                "automationGoalDevops": [
                  "ci-cd",
                  "data-syncing"
                ],
                "companySize": "100-499",
                "companyType": "saas",
                "role": "engineering",
                "reportedSource": "google"
              },
              "settings": {
                "easyAIWorkflowOnboarded": true,
                "firstSuccessfulWorkflowId": "8OXBRWPKi4bVVx2f",
                "userActivated": true,
                "userActivatedAt": 1749245726426,
                "npsSurvey": {
                  "waitingForResponse": true,
                  "ignoredCount": 2,
                  "lastShownAt": 1751330775031
                }
              },
              "role": "global:member",
              "disabled": false,
              "mfaEnabled": false,
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "tags": []
}