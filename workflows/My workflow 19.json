{
  "createdAt": "2025-06-09T21:14:36.217Z",
  "updatedAt": "2025-06-09T21:14:36.217Z",
  "id": "tlxtkiLrINUfrgEQ",
  "name": "My workflow 19",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {
          "temperature": 0.2
        }
      },
      "id": "99ea752a-ab7d-4943-a44d-a11d73b1ff63",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        1140,
        720
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "contextWindowLength": 10
      },
      "id": "ec70c806-dbf6-4363-9100-7f8bfb366d8d",
      "name": "Window Buffer Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        1320,
        720
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {},
      "id": "a570e655-867a-462d-b8f1-a04a553249a4",
      "name": "No Operation, do nothing",
      "type": "n8n-nodes-base.noOp",
      "position": [
        2020,
        800
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SHOW TABLES;",
        "options": {}
      },
      "id": "4295434c-364e-4304-909f-ef725f230911",
      "name": "List all tables in a database",
      "type": "n8n-nodes-base.mySql",
      "position": [
        200,
        260
      ],
      "typeVersion": 2.4
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DESCRIBE {{ $json.Tables_in_tttytdb2023 }};",
        "options": {}
      },
      "id": "9541b426-7307-4e34-83cc-2baf693a6ec0",
      "name": "Extract database schema",
      "type": "n8n-nodes-base.mySql",
      "position": [
        380,
        260
      ],
      "typeVersion": 2.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "764176d6-3c89-404d-9c71-301e8a406a68",
              "name": "table",
              "type": "string",
              "value": "={{ $('List all tables in a database').item.json.Tables_in_tttytdb2023 }}"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "5f028fce-7cf3-44d9-8f73-c4a00411f714",
      "name": "Add table name to output",
      "type": "n8n-nodes-base.set",
      "position": [
        560,
        260
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "operation": "toJson",
        "options": {}
      },
      "id": "9ab69057-8bbd-4547-91f8-96c26857e129",
      "name": "Convert data to binary",
      "type": "n8n-nodes-base.convertToFile",
      "position": [
        740,
        260
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "./chinook_mysql.json",
        "options": {}
      },
      "id": "996cbc2c-d360-4c51-837b-72194f9c33d6",
      "name": "Save file locally",
      "type": "n8n-nodes-base.readWriteFile",
      "position": [
        900,
        260
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "fromJson",
        "options": {}
      },
      "id": "cca264f2-2168-4937-a1e1-7157d0b9aa68",
      "name": "Extract data from file",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        600,
        700
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "4c0d58cd-1bd3-4628-b806-a10b5a926856",
      "name": "Chat Trigger",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "position": [
        120,
        700
      ],
      "webhookId": "c308dec7-655c-4b79-832e-991bd8ea891f",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "agent": "conversationalAgent",
        "promptType": "define",
        "text": "=Here is the database schema: {{ $json.schema }}\nHere is the user request: {{ $('Chat Trigger').item.json.chatInput }}",
        "options": {
          "humanMessage": "TOOLS\n------\nAssistant can ask the user to use tools to look up information that may be helpful in answering the users original question. The tools the human can use are:\n\n{tools}\n\n{format_instructions}\n\nUSER'S INPUT\n--------------------\nHere is the user's input (remember to respond with a markdown code snippet of a json blob with a single action, and NOTHING else):\n\n{{input}}",
          "systemMessage": "Assistant is a large language model trained by OpenAI.\n\nAssistant is designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, Assistant is able to generate human-like text based on the input it receives, allowing it to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.\n\nAssistant is constantly learning and improving, and its capabilities are constantly evolving. It is able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. Additionally, Assistant is able to generate its own text based on the input it receives, allowing it to engage in discussions and provide explanations and descriptions on a wide range of topics.\n\nOverall, Assistant is a powerful system that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether you need help with a specific question or just want to have a conversation about a particular topic, Assistant is here to assist.\n\nHelp user to work with the MySQL database.\n\nPlease wrap any sql commands into triple quotes. You don't have a tool to run SQL, so the user will do that instead of you."
        }
      },
      "id": "0856f81c-5cf5-4810-9afb-27d32c591924",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        1160,
        580
      ],
      "typeVersion": 1.6
    },
    {
      "parameters": {
        "content": "## Run this part only once\nThis section:\n* loads a list of all tables from the database hosted on [db4free](https://db4free.net/signup.php) \n* extracts the database schema for each table and adds the table name\n* converts the schema into a binary JSON format\n* saves the schema `./chinook_mysql.json` file locally\n\n***Now you can use chat to \"talk\" to your data!*** ðŸŽ‰",
        "height": 466.4256045427794,
        "width": 1065.0949045120822,
        "color": 3
      },
      "id": "413bca35-6edb-44b8-acb0-b9734d09d81a",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        0
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Pre-workflow setup \nConnect to a free MySQL server and import your database. Follow Step 1 and 2 in this [tutorial](https://blog.n8n.io/compare-databases/) for more.\n\n*The Chinook data used in this workflow is available on [GitHub](https://github.com/msimanga/chinook/tree/master/mysql).* ",
        "height": 174.60585869504342,
        "width": 312.47220527158765,
        "color": 6
      },
      "id": "949c4ec2-1660-4505-8a3f-f7d157eafd72",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        720,
        40
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "3846bdd0-1629-41d6-8139-b3c22907bdc1",
      "name": "When clicking \"Test workflow\"",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        40,
        260
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## On every chat message:\n\n* The workflow gets the data from the local schema file and extracts it as a JSON object. This way, we achieve two important improvements:\n * faster processing time as we don't need to fetch the schema for each table from a slow remote database\n * the Agent will know database structure without seeing the actual data\n* DB schema is then converted into a long string, JSON fields from the Chat Trigger are added before they are entered into the Agent node.\n",
        "height": 489.29614613074125,
        "width": 1062.678698911262,
        "color": 6
      },
      "id": "ca6827b6-4fb6-4b92-bf21-720a3e880831",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        20,
        500
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "### LangChain AI Agent's system prompt is modified.\nIt uses only the database schema to generate SQL queries. The agent creates these queries but does not execute them. Instead, it passes them to subsequent nodes.\n\n**Example:**\n\"Can you show me the list of all German customers?\" \n\nQueries are generated only when necessary; for some requests, a query may not be needed. This is because certain questions can be answered directly without SQL execution.\n\n**Example:**\n\"Can you list me all tables?\"",
        "height": 714.7896619176862,
        "width": 445.66588600071304,
        "color": 6
      },
      "id": "befaca4f-15e1-4e10-b67b-8df641b8716a",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1080,
        280
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "42abd24e-419a-47d6-bc8b-7146dd0b8314",
              "name": "sessionId",
              "type": "string",
              "value": "={{ $('Chat Trigger').first().json.sessionId }}"
            },
            {
              "id": "39244192-a1a6-42fe-bc75-a6fba1f264df",
              "name": "action",
              "type": "string",
              "value": "={{ $('Chat Trigger').first().json.action }}"
            },
            {
              "id": "f78c57d9-df13-43c7-89a7-5387e528107e",
              "name": "chatinput",
              "type": "string",
              "value": "={{ $('Chat Trigger').first().json.chatInput }}"
            },
            {
              "id": "e42b39eb-dfbd-48d9-94ed-d658bdd41454",
              "name": "schema",
              "type": "string",
              "value": "={{ $json.data }}"
            }
          ]
        },
        "options": {}
      },
      "id": "ca9e3bf7-ceab-421f-bd19-e150bf735200",
      "name": "Combine schema data and chat input",
      "type": "n8n-nodes-base.set",
      "position": [
        820,
        700
      ],
      "executeOnce": true,
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "fileSelector": "./chinook_mysql.json",
        "options": {}
      },
      "id": "148dcf66-45f0-430d-abf6-b7e02b549a48",
      "name": "Load the schema from the local file",
      "type": "n8n-nodes-base.readWriteFile",
      "position": [
        360,
        700
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ebbe194a-4b8b-44c9-ac19-03cf69d353bf",
              "name": "query",
              "type": "string",
              "value": "={{ ($json.output.match(/SELECT[\\s\\S]*?;/i) || [])[0] || \"\" }}"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "ed402be6-68da-4307-904c-60306111b491",
      "name": "Extract SQL query",
      "type": "n8n-nodes-base.set",
      "position": [
        1580,
        620
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "2963d04d-9d79-49f9-b52a-dc8732aca781",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              },
              "leftValue": "={{ $json.query }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "6158bb29-04bf-446c-9d09-18a119140347",
      "name": "Check if query exists",
      "type": "n8n-nodes-base.if",
      "position": [
        1740,
        620
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "content": "## SQL query extraction\nCheck if the agent's response contains an SQL query. If it does, we extract the query using a regular expression.",
        "height": 278.8174358200552,
        "width": 317.8901548206743,
        "color": 3
      },
      "id": "1925c009-1e41-4a5b-badf-37e00a657da3",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1560,
        520
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "",
        "height": 715.7029266156915,
        "width": 882.7611828369563,
        "color": 6
      },
      "id": "b8a3adf1-bd99-440b-8402-443237f2cb89",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1540,
        280
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "The AI Agent remembers the schema, questions, and final answers, but not data values, since queries run externally. The agent can't access database content. ",
        "height": 108.03673727584527,
        "width": 257.46308756569573,
        "color": 3
      },
      "id": "aea9224d-6752-47d5-b9f5-a5ed4ee1dc92",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1260,
        860
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "- The SQL node accesses the database and executes the query. The results are then formatted for readability.\n- Both the chat response and the query result are displayed in the chat window.",
        "height": 123.43139661532095,
        "width": 308.8514666587585,
        "color": 3
      },
      "id": "31ff70fa-f7e1-4f67-8077-cbb165f2a847",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2100,
        280
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "When the agent responds without an SQL query, you receive an immediate answer with no additional processing.",
        "height": 89.90186716520257,
        "width": 250.40895053328057,
        "color": 3
      },
      "id": "3bab8568-5999-497f-80ef-ed4689a6a1e0",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2160,
        880
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f944d21f-6aac-4842-8926-4108d6cad4bf",
              "name": "sqloutput",
              "type": "string",
              "value": "={{ Object.keys($jmespath($input.all(),'[].json')[0]).join(' | ') }} \n{{ ($jmespath($input.all(),'[].json')).map(obj => Object.values(obj).join(' | ')).join('\\n') }}"
            }
          ]
        },
        "options": {}
      },
      "id": "f7553d1f-add1-40b4-bc6a-e1e62e20a9fc",
      "name": "Format query results",
      "type": "n8n-nodes-base.set",
      "position": [
        2100,
        420
      ],
      "executeOnce": true,
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $json.query }}",
        "options": {}
      },
      "id": "bc16631d-bff1-4f06-93bb-aa80d1201038",
      "name": "Run SQL query",
      "type": "n8n-nodes-base.mySql",
      "position": [
        1940,
        420
      ],
      "typeVersion": 2.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "aa55e186-1535-4923-aee4-e088ca69575b",
              "name": "output",
              "type": "string",
              "value": "={{ $json.output }}\n\nSQL result:\n```markdown\n{{ $json.sqloutput }}\n```"
            }
          ]
        },
        "options": {}
      },
      "id": "f674614f-3531-4543-8430-3ce8ec323287",
      "name": "Prepare final output",
      "type": "n8n-nodes-base.set",
      "position": [
        2240,
        700
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "id": "37c57b91-64d1-44b6-8dc2-81199e256071",
      "name": "Combine query result and chat answer",
      "type": "n8n-nodes-base.merge",
      "position": [
        2020,
        620
      ],
      "typeVersion": 3
    }
  ],
  "connections": {
    "AI Agent": {
      "main": [
        [
          {
            "node": "Extract SQL query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Trigger": {
      "main": [
        [
          {
            "node": "Load the schema from the local file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Run SQL query": {
      "main": [
        [
          {
            "node": "Format query results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract SQL query": {
      "main": [
        [
          {
            "node": "Check if query exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Format query results": {
      "main": [
        [
          {
            "node": "Combine query result and chat answer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Check if query exists": {
      "main": [
        [
          {
            "node": "Run SQL query",
            "type": "main",
            "index": 0
          },
          {
            "node": "Combine query result and chat answer",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert data to binary": {
      "main": [
        [
          {
            "node": "Save file locally",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract data from file": {
      "main": [
        [
          {
            "node": "Combine schema data and chat input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract database schema": {
      "main": [
        [
          {
            "node": "Add table name to output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add table name to output": {
      "main": [
        [
          {
            "node": "Convert data to binary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List all tables in a database": {
      "main": [
        [
          {
            "node": "Extract database schema",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking \"Test workflow\"": {
      "main": [
        [
          {
            "node": "List all tables in a database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine schema data and chat input": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load the schema from the local file": {
      "main": [
        [
          {
            "node": "Extract data from file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine query result and chat answer": {
      "main": [
        [
          {
            "node": "Prepare final output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "2440eb36-dd27-4ba6-a22b-e5780013f6f0",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-06-09T21:14:36.220Z",
      "updatedAt": "2025-06-09T21:14:36.220Z",
      "role": "workflow:owner",
      "workflowId": "tlxtkiLrINUfrgEQ",
      "projectId": "UPXsxNbEdAC5wodw",
      "project": {
        "createdAt": "2025-05-30T21:50:35.802Z",
        "updatedAt": "2025-05-30T21:51:22.504Z",
        "id": "UPXsxNbEdAC5wodw",
        "name": "Alexandra  Trujillo  <alexandra.trujillo@canteradigital.mx>",
        "type": "personal",
        "icon": null,
        "projectRelations": [
          {
            "createdAt": "2025-05-30T21:50:35.804Z",
            "updatedAt": "2025-05-30T21:50:35.804Z",
            "role": "project:personalOwner",
            "userId": "65d58894-4572-495d-8c41-0b8ea4c5b71f",
            "projectId": "UPXsxNbEdAC5wodw",
            "user": {
              "createdAt": "2025-05-30T21:50:35.800Z",
              "updatedAt": "2025-06-06T21:50:25.281Z",
              "id": "65d58894-4572-495d-8c41-0b8ea4c5b71f",
              "email": "alexandra.trujillo@canteradigital.mx",
              "firstName": "Alexandra ",
              "lastName": "Trujillo ",
              "personalizationAnswers": {
                "version": "v4",
                "personalization_survey_submitted_at": "2025-05-30T21:52:04.811Z",
                "personalization_survey_n8n_version": "1.92.2",
                "automationGoalDevops": [
                  "data-syncing",
                  "ticketing-systems-integrations",
                  "ci-cd",
                  "monitoring-alerting",
                  "reporting",
                  "incident-response"
                ],
                "companyType": "systems-integrator",
                "role": "it"
              },
              "settings": {
                "easyAIWorkflowOnboarded": true,
                "firstSuccessfulWorkflowId": "bmdwVJ36IDZozHoU",
                "userActivated": true,
                "userActivatedAt": 1749246625266
              },
              "role": "global:member",
              "disabled": false,
              "mfaEnabled": false,
              "isPending": false,
              "isOwner": false
            }
          }
        ]
      }
    }
  ],
  "tags": []
}