{
  "createdAt": "2025-06-16T18:47:05.200Z",
  "updatedAt": "2025-06-27T01:45:24.000Z",
  "id": "31IGIEeHfP5mekUe",
  "name": "agente generador de contenido Alexandra",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -480,
        -140
      ],
      "id": "880c3185-986e-4fe2-a2ea-ba92025c3c23",
      "name": "Telegram Trigger",
      "webhookId": "87fbdcb5-8a32-44c5-941c-b6149ea3dcf0",
      "credentials": {
        "telegramApi": {
          "id": "QwDm9RUUs1cAGbSv",
          "name": "Telegram account contenido Alexandra"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message.text }}",
        "options": {
          "systemMessage": "=**Instructions for n8n Parent Agent: Social Media Post Creator**\n \n**Objective:** To orchestrate the workflow for creating social media posts by calling upon two child agents: \"agente_scrappyng\" for information retrieval and \"agente_copy\" for image generation. The parent agent will then combine the scraped information and the generated image to produce a complete social media post.\n \n**Workflow:**\n \n1.  **Receive User Request:** The parent agent will receive a user's request specifying the topic or keywords for the social media post.\n \n2.  **Call \"agente_scrappyng\":**\n    * The parent agent will invoke the \"agente_scrappyng\" agent.\n    * It will pass the user's input (topic/keywords) as the search query for \"agente_scrappyng\".\n    * It will instruct \"agente_scrappyng\" to perform web scraping to find relevant information based on the query.\n    * It will expect \"agente_scrappyng\" to return a summary of the findings in two short paragraphs (maximum 500 characters per paragraph), as previously defined.\n \n3.  **Receive Scraped Information:** The parent agent will receive the summarized information from \"agente_scrappyng\".\n \n4.  **Call \"agente_copy\" (Image Generation):**\n    * The parent agent will invoke the \"agente_copy\" agent (assuming this is the designated name for the image generation agent).\n    * It will pass the summarized information received from \"agente_scrappyng\" as context for the image generation.\n    * It will instruct \"agente_copy\" to generate a relevant and visually appealing image that complements the scraped information and is suitable for social media.\n    * It will expect \"agente_copy\" to return the generated image (e.g., as a file path or data URL).\n \n5.  **Receive Generated Image:** The parent agent will receive the image from \"agente_copy\".\n \n6.  **Construct Social Media Post:**\n    * The parent agent will combine the summarized information from \"agente_scrappyng\" and the generated image from \"agente_copy\".\n    * It will format this information into a complete social media post, considering best practices for engagement and readability on social media platforms.\n    * This may involve:\n        * Writing a compelling caption that incorporates key findings from the scraped information.\n        * Ensuring the caption is engaging, informative, and includes a call to action (if appropriate).\n        * Attaching the generated image to the post.\n        * Suggesting relevant hashtags.\n \n7.  **Output Social Media Post:** The parent agent will output the complete social media post (text and image).\n \n**Output Format (in Spanish):**\n \n```markdown\n**Post para Redes Sociales:**\n \n**Imagen:** [Aquí se adjuntaría la imagen generada por el agente_copy]\n \n**Texto:**\n \n[Párrafo 1 del resumen del agente_scrappyng]\n \n[Párrafo 2 del resumen del agente_scrappyng]\n \n[Texto adicional para redes sociales: titular llamativo, llamada a la acción, etc. - aplicando principios de copywriting]\n \n**Hashtags sugeridos:** #[Hashtag1] #[Hashtag2] #[HashtagRelacionado]\n \n{{ new Date().toISOString() }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -260,
        -140
      ],
      "id": "fb9e0666-de00-4ab6-b391-14757887ad77",
      "name": "AI Agent",
      "disabled": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -340,
        60
      ],
      "id": "4229751d-c591-4b9a-a53d-113b59dc3001",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "kN8CVraho0i9hYUQ",
          "name": "OpenAi account Alexandra Trujillo"
        }
      }
    },
    {
      "parameters": {
        "description": "Llamar a este agente cuando se tenga una petición de búsqueda de internet",
        "workflowId": {
          "__rl": true,
          "value": "p46e8KjRicXzWNwj",
          "mode": "list",
          "cachedResultName": "agente scrappyng Alexandra"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        0,
        80
      ],
      "id": "8c9d5679-4027-4636-a9f1-971f54077e2b",
      "name": "agente_scrappyng"
    },
    {
      "parameters": {
        "description": "Se llama a este agente cuando se necesita generar instrucciones para un modelo de generación de imágenes ",
        "workflowId": {
          "__rl": true,
          "value": "me73A3ZR04AECuj4",
          "mode": "list",
          "cachedResultName": "agente copy write Alexandra"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        200,
        80
      ],
      "id": "0637255b-c405-4f93-98a7-c6ce1cc4e79e",
      "name": "agente_copy"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.output }}",
        "messages": {
          "messageValues": [
            {
              "message": "=**Prompt Completo para la Cadena LLM de Formateo de Salida**  \n\n**Idioma de Instrucciones:** Inglés \n\n**Idioma de Respuesta:** Español  \n\n**Objetivo:** Formatear la respuesta de salida de un modelo de lenguaje grande (LLM) para eliminar símbolos extraños o estructuras de información que no sean palabras u oraciones estándar en español. El objetivo es limpiar el texto y presentarlo de una manera más legible y en lenguaje natural.   \n\n**Instrucciones Detalladas para el Modelo LLM:** \n\n1.  **Input Analysis:** Recibe una cadena de texto como entrada. Esta cadena puede contener símbolos no deseados, elementos que no son palabras, o estructuras de información que necesitan ser removidas o convertidas a texto plano.  \n\n2.  **Identification of Non-Standard Elements:** Identifica elementos dentro del texto de entrada que no son palabras típicas, signos de puntuación estándar o estructuras de oraciones comunes en español. Esto incluye, pero no se limita a:     * Símbolos especiales o caracteres inusuales (por ejemplo, `###`, `####`, `-----`, caracteres de control, etc.).     * Estructuras de formato como listas con viñetas (`-`), listas numeradas (`1.`, `2.`), si el objetivo es texto plano continuo.     * Enlaces URL o direcciones web, si no se consideran parte del contenido principal en lenguaje natural.     * Cualquier otro marcador no lingüístico o artefacto del formato original que dificulte la lectura como texto normal.   \n\n3.  **Removal and Transformation:** Aplica las siguientes acciones a los elementos no estándar identificados:     * **Eliminación:** Remueve completamente los símbolos o estructuras que no contribuyen al significado del texto como lenguaje natural en español.     * **Transformación:** Convierte estructuras como listas en texto continuo, utilizando conectores lingüísticos apropiados (por ejemplo, \"Además,\", \"También,\", \"En cuanto a,\"). Si se considera relevante, extrae la información clave de elementos no textuales y exprésala en palabras (por ejemplo, si se decide incluir información de un enlace, se debería parafrasear su significado en una oración).   \n\n4.  **Preservation of Meaning and Structure:** Asegúrate de que el proceso de eliminación y transformación no altere el significado fundamental del texto original. El resultado debe ser una secuencia de oraciones coherentes y gramaticalmente correctas en español.   \n\n5.  **Focus on Natural Language:** El resultado principal debe ser un texto fluido compuesto por palabras y oraciones en español que sean fáciles de leer y entender por un humano. Evita la inclusión de los símbolos o estructuras no deseadas identificadas en el paso 2.  \n\n"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        200,
        -480
      ],
      "id": "cc55a2b0-04ac-42f2-ad75-8b4a6fdbba65",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        240,
        -260
      ],
      "id": "920bf589-ba30-4552-80da-65291d5480b3",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "kN8CVraho0i9hYUQ",
          "name": "OpenAi account Alexandra Trujillo"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        520,
        -360
      ],
      "id": "622faf38-f767-43e4-9d4f-a48fb29e941c",
      "name": "Telegram",
      "webhookId": "1c25f239-77b2-4056-bdbe-88107cd45f44",
      "credentials": {
        "telegramApi": {
          "id": "QwDm9RUUs1cAGbSv",
          "name": "Telegram account contenido Alexandra"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.output }}",
        "messages": {
          "messageValues": [
            {
              "message": "=**Instructions for the AI Model: DALL-E Prompt Generator**  **Objective:** To receive a user's request and generate detailed and effective prompts specifically designed for OpenAI's DALL-E image generation model. The generated prompts should aim to produce high-quality, relevant, and visually interesting images that accurately reflect the user's input.  **Input:** A natural language request from the user describing the desired image.  **Tasks:**  1.  **Understand the User's Request:** Analyze the user's input to identify the key elements, subjects, actions, settings, moods, and artistic styles they are envisioning.  2.  **Identify Key Entities and Concepts:** Extract the main nouns, verbs, adjectives, and adverbs from the user's request. These form the core of the image to be generated.  3.  **Elaborate on Details:** Expand upon the user's basic request by adding specific details that can enhance the generated image. Consider aspects such as:     * **Subject Details:** Specific characteristics of the main objects or characters (e.g., age, clothing, expression, posture).     * **Setting/Environment:** The location, time of day, weather conditions, and overall atmosphere.     * **Actions/Interactions:** What the subjects are doing and how they are interacting with their surroundings or other elements.     * **Mood/Atmosphere:** The emotional tone or feeling the image should convey (e.g., serene, mysterious, vibrant, dramatic).     * **Lighting:** The type and direction of light (e.g., soft sunlight, dramatic shadows, neon glow).     * **Camera Angle/Perspective:** The viewpoint from which the scene is depicted (e.g., close-up, wide shot, bird's-eye view).  4.  **Incorporate Artistic Style and Techniques:** Suggest or incorporate specific artistic styles, mediums, or techniques that could enhance the visual appeal and align with the user's implicit or explicit preferences. Examples include:     * **Painting Styles:** Impressionism, Surrealism, Renaissance, Abstract.     * **Photography Styles:** Macro, Landscape, Portrait, Documentary.     * **Rendering Techniques:** Realistic, Photorealistic, Stylized, Cartoonish, 3D render.     * **Artists:** Referencing the style of famous artists (e.g., \"in the style of Van Gogh\").  5.  **Use DALL-E Specific Keywords and Modifiers:** Employ keywords and phrases known to work well with DALL-E to influence the generated image's quality and style. This might include terms related to detail, realism, artistic quality, and specific visual effects.  6.  **Structure the Prompt Effectively:** Organize the generated prompt in a clear and logical manner. A common structure includes:     * Start with the main subject(s).     * Describe the setting and environment.     * Specify any actions or interactions.     * Detail the desired mood, lighting, and camera angle.     * Mention the artistic style or rendering technique.     * Include quality enhancers (e.g., \"highly detailed,\" \"realistic,\" \"cinematic lighting\").  7.  **Provide Multiple Prompt Options (Optional but Recommended):** Generate several variations of the prompt, each with slightly different emphasis or stylistic choices, to give the user more options and potentially better results from DALL-E.  **Output:** Generate one or more detailed prompts for DALL-E, formatted as clear and concise text strings.  **Example of Expected Output (in Spanish):**  ```markdown **Prompt 1:** Una majestuosa criatura híbrida, mitad águila calva y mitad león africano, volando a través de un cielo crepuscular con nubes arremolinadas de color naranja y púrpura. Plumaje dorado brillante y melena leonina ondeando al viento. Iluminación dramática, estilo de pintura de fantasía épica.  **Prompt 2:** Un acogedor café futurista en una calle lluviosa de Tokio por la noche. Luces de neón reflejándose en el pavimento mojado. Un robot barista sirviendo un café a un cliente humano con un abrigo largo. Ambiente melancólico y vibrante, fotografía cinematográfica con profundidad de campo.  **Prompt 3:** Un bodegón surrealista con frutas flotando en el aire y relojes derritiéndose sobre una mesa de madera antigua. Fondo abstracto con colores vibrantes y formas geométricas. Estilo de Salvador Dalí. Alta resolución, detalles intrincados."
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        360,
        -80
      ],
      "id": "6861a91a-bf75-4428-8486-5e4d02f40d26",
      "name": "Basic LLM Chain1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        460,
        140
      ],
      "id": "bdb119ec-b6fc-4bbb-9e2e-98b1e176a583",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "kN8CVraho0i9hYUQ",
          "name": "OpenAi account Alexandra Trujillo"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.message.chat.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -180,
        80
      ],
      "id": "4a4977c3-307a-4b5e-beb5-88b0e1010385",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "resource": "image",
        "prompt": "={{ $json.text }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        720,
        -80
      ],
      "id": "557fb122-5f5b-4418-911d-e243fff6ee59",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "kN8CVraho0i9hYUQ",
          "name": "OpenAi account Alexandra Trujillo"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendPhoto",
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "binaryData": true,
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        940,
        -80
      ],
      "id": "1ae17b7a-ed2e-40b8-94fe-67f7d7d68e77",
      "name": "Telegram1",
      "webhookId": "c4c3e9c0-abcc-4d7e-9c01-6144e6dc108a",
      "credentials": {
        "telegramApi": {
          "id": "QwDm9RUUs1cAGbSv",
          "name": "Telegram account contenido Alexandra"
        }
      },
      "disabled": true
    }
  ],
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "agente_scrappyng": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "agente_copy": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          },
          {
            "node": "Basic LLM Chain1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain1": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Telegram1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "f691a6d4-9553-416b-b259-0f73cf5c75ae",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-06-16T18:47:05.210Z",
      "updatedAt": "2025-06-16T18:47:05.210Z",
      "role": "workflow:owner",
      "workflowId": "31IGIEeHfP5mekUe",
      "projectId": "UPXsxNbEdAC5wodw",
      "project": {
        "createdAt": "2025-05-30T21:50:35.802Z",
        "updatedAt": "2025-05-30T21:51:22.504Z",
        "id": "UPXsxNbEdAC5wodw",
        "name": "Alexandra  Trujillo  <alexandra.trujillo@canteradigital.mx>",
        "type": "personal",
        "icon": null,
        "projectRelations": [
          {
            "createdAt": "2025-05-30T21:50:35.804Z",
            "updatedAt": "2025-05-30T21:50:35.804Z",
            "role": "project:personalOwner",
            "userId": "65d58894-4572-495d-8c41-0b8ea4c5b71f",
            "projectId": "UPXsxNbEdAC5wodw",
            "user": {
              "createdAt": "2025-05-30T21:50:35.800Z",
              "updatedAt": "2025-06-12T00:59:16.255Z",
              "id": "65d58894-4572-495d-8c41-0b8ea4c5b71f",
              "email": "alexandra.trujillo@canteradigital.mx",
              "firstName": "Alexandra ",
              "lastName": "Trujillo ",
              "personalizationAnswers": {
                "version": "v4",
                "personalization_survey_submitted_at": "2025-05-30T21:52:04.811Z",
                "personalization_survey_n8n_version": "1.92.2",
                "automationGoalDevops": [
                  "data-syncing",
                  "ticketing-systems-integrations",
                  "ci-cd",
                  "monitoring-alerting",
                  "reporting",
                  "incident-response"
                ],
                "companyType": "systems-integrator",
                "role": "it"
              },
              "settings": {
                "easyAIWorkflowOnboarded": true,
                "firstSuccessfulWorkflowId": "bmdwVJ36IDZozHoU",
                "userActivated": true,
                "userActivatedAt": 1749246625266,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1749689952085
                }
              },
              "role": "global:member",
              "disabled": false,
              "mfaEnabled": false,
              "isPending": false,
              "isOwner": false
            }
          }
        ]
      }
    }
  ],
  "tags": []
}